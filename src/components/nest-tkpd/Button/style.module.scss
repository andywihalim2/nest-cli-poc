@import './theme';
@import '../utils';

.button{
  // static
  @include safe-prop(--n-btn-font-weight,null);

  $variants: 'default', 'ghost', 'text';
  @each $state in $states{
    @include state($state){
      @each $variant in $variants{
        @include variant("variant", $variant){
          // colors
          $colors: safe-merge(('default': $btn), safe-get($btn, 'colors'));
          @each $color, $colorProps in $colors{ 
            @include variant("color", $color){
              $variantProps: if($variant!='default', safe-get($colorProps, $variant), $colorProps);
              background: safe-get($variantProps, 'background');
              border-color: safe-get($variantProps, 'border-color');
              color: safe-get($variantProps, 'color');
              @include hover{
                background: safe-get($variantProps, 'hover-background');
                border-color: safe-get($variantProps, 'hover-border-color');
                color: safe-get($variantProps, 'hover-color');
              };
              &:active{
                background: safe-get($variantProps, 'active-background');
                border-color: safe-get($variantProps, 'active-border-color');
                color: safe-get($variantProps, 'active-color');
              };
              &[data-n-disabled],
              &:disabled{
                background: safe-get($variantProps, 'disabled-background');
                border-color: safe-get($variantProps, 'disabled-border-color');
                color: safe-get($variantProps, 'disabled-color');
              }
              & .loading{
                color: safe-get($variantProps, 'loading-color');
              }
            }
          }
        }
      }
    }
  }
}

.button{
  cursor: pointer;
  display: inline-block;
  text-decoration: none;
  vertical-align: middle;
  transition: background-color 0.3s ease, border-color 0.3s ease, color 0.3s ease;
  position: relative;
  border: 1px solid;

  // block
  &[data-n-block] {
    display: block;
    width: 100%;
  }

  :active{
    transition: background-color 0s ease, border-color 0s ease, color 0s ease;
  }

  // disabled
  :disabled, &[data-n-disabled]{
    cursor: not-allowed;
  }

  // btn loading
  & .loading{
    position: absolute;
    top: 50%;
    left: 50%;
    translate: -50% -50%;
  }

  // btn main
  & .main{
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
    transition: opacity .3s cubic-bezier(0.63,0.01,0.29,1), translate .3s cubic-bezier(0.63,0.01,0.29,1);
    white-space: nowrap;
  }
  &[data-n-loading] .main{
    opacity: 0;
    translate: 0 -50%;
  }
}

.button{
  $sizes: safe-merge(('default' : $btn), safe-get($btn, 'sizes'));
  @each $size, $sizeProps in $sizes{
    @include variant("size", $size){
      $i: 0;
      @each $breakpoint, $min-width in $breakpoints {
        $i: $i+1;
        @include breakpoint($breakpoint, $min-width){
          @include safe-prop('height', safe-nth(safe-get($sizeProps, 'height'), $i));
          @include safe-prop('padding-inline', safe-nth(safe-get($sizeProps, 'padding-inline'), $i));
          @include safe-prop('font-size', safe-nth(safe-get($sizeProps, 'font-size'), $i));
          @include safe-prop('border-radius', safe-nth(safe-get($sizeProps, 'border-radius'), $i));
          & .loading{
            @include safe-prop('width', safe-nth(safe-get($sizeProps, 'icon-size'), $i));
            @include safe-prop('height', safe-nth(safe-get($sizeProps, 'icon-size'), $i));
          }
          & .main{
            @include safe-prop('gap', safe-nth(safe-get($sizeProps, 'gap'), $i));
          }
        }
      }
    }
  }
}